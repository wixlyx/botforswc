from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from database import Db
from visit_make import visitmake

TOKEN = ''

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Db('database.db')


class Send(StatesGroup):
    nexta = State()


class Codewords(StatesGroup):
    words = State()


class Newadmin(StatesGroup):
    admin = State()


class Deleteadmin(StatesGroup):
    username = State()


class Dialog(StatesGroup):
    spam = State()


class Profile(StatesGroup):
    name = State()
    surname = State()
    city = State()
    role = State()
    year = State()
    description = State()
    superpower = State()
    photo = State()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    if db.profile_exists(message.from_user.username):
        admin = db.is_admin(message.from_user.username)[0]
        if admin == 1:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"),
                         types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞"),
                         types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"),
                         types.InlineKeyboardButton(text="–û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–ª—ã"),
                         types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"),
                         types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"), )
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                                 reply_markup=keyboard)
        else:
            menu5 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btn_new = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
            menu5.add(btn_new)
            await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤–∏–∑–∏—Ç–∫–∞', reply_markup=menu5)
    else:
        btn_ru = KeyboardButton('–†—É—Å—Å–∫–∏–π')
        btn_en = KeyboardButton('English')
        menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        menu.add(btn_ru, btn_en)
        await message.answer('Select language', reply_markup=menu)


@dp.message_handler(lambda message: message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
async def redo(message: types.Message):
    db.delete(message.from_user.username)
    await bot_start(message)


@dp.message_handler(lambda message: message.text == '–†—É—Å—Å–∫–∏–π', state='*')
async def bot_start(message: types.Message):
    await message.answer('üëãüèª –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ Sky World Community. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?')
    await message.answer('–Ø –ü–æ–º–æ—â–Ω–∏–∫ SWC –∏ —Å–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –≤–∏–∑–∏—Ç–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞.')
    await message.answer('‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–º—èüëáüèª')
    await Profile.name.set()


@dp.message_handler(state=Profile.name)
async def insert_name(message: types.Message, state: FSMContext):
    await state.update_data(profile_name=message.text)
    await message.reply(f'üëåüèª –û—Ç–ª–∏—á–Ω–æ')
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é üëáüèª")
    await Profile.next()


@dp.message_handler(state=Profile.surname)
async def insert_surname(message: types.Message, state: FSMContext):
    await state.update_data(profile_surname=message.text)
    await message.reply(f'–û—Ç–ª–∏—á–Ω–æ')
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ üëáüèª")
    await Profile.next()


@dp.message_handler(state=Profile.city)
async def insert_city(message: types.Message, state: FSMContext):
    await state.update_data(profile_city=message.text)
    await Profile.next()
    await message.answer('üëåüèª –û—Ç–ª–∏—á–Ω–æ')
    await message.answer('‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ üëáüèª')


@dp.message_handler(state=Profile.role)
async def insert_role(message: types.Message, state: FSMContext):
    if len(message.text) < 121:
        await state.update_data(profile_role=message.text)
        await Profile.next()
    else:
        await message.answer(f'–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤! '
                             f'–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)üëáüèª üß°')
        return
    menu1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_2015 = KeyboardButton('2015')
    btn_2016 = KeyboardButton('2016')
    btn_2017 = KeyboardButton('2017')
    btn_2018 = KeyboardButton('2018')
    btn_2019 = KeyboardButton('2019')
    btn_2020 = KeyboardButton('2020')
    btn_2021 = KeyboardButton('2021')
    btn_2022 = KeyboardButton('2022')
    menu1.add(btn_2015, btn_2016, btn_2017, btn_2018, btn_2019, btn_2020, btn_2021, btn_2022)
    await message.answer('‚úèÔ∏è –í—ã–±–µ—Ä–∏, —Å –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ SWC?', reply_markup=menu1)


@dp.message_handler(state=Profile.year)
async def insert_year(message: types.Message, state: FSMContext):
    await state.update_data(profile_year=message.text)
    await Profile.next()
    await message.answer('üî• –°—É–ø–µ—Ä!')
    await message.answer('‚úèÔ∏è –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö')
    await message.answer('(!!Ô∏è –º–∞–∫—Å–∏–º—É–º 120 –∑–Ω–∞–∫–æ–≤)üëáüèª')


@dp.message_handler(state=Profile.description)
async def insert_description(message: types.Message, state: FSMContext):
    if len(message.text) < 121:
        await state.update_data(profile_description=message.text)
        await Profile.next()
    else:
        await message.answer(f'–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤! '
                             f'–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)üëáüèª üß°')
        return
    await message.answer("‚úèÔ∏è –ß–µ–º –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É? –ö–∞–∫–∞—è —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞?")
    await message.answer('(!!Ô∏è –º–∞–∫—Å–∏–º—É–º 120 –∑–Ω–∞–∫–æ–≤)üëáüèª')


@dp.message_handler(state=Profile.superpower)
async def insert_superpower(message: types.Message, state: FSMContext):
    if len(message.text) < 121:
        await state.update_data(profile_superpower=message.text)
        await Profile.next()
    else:
        await message.answer(f'–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤! '
                             f'–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)üëáüèª üß°')
        return
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏")


@dp.message_handler(state=Profile.photo, content_types=['photo'])
async def insert_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('photo_user/' + str(message.from_user.id) + '.jpg')
    await Profile.next()
    user_data = await state.get_data()
    db.create_profile(message.from_user.username, str(user_data['profile_name']), str(user_data['profile_surname']),
                      str(user_data['profile_city']), user_data['profile_role'], user_data['profile_year'],
                      str(user_data['profile_description']), str(user_data['profile_superpower']),
                      'photo/' + str(message.from_user.id) + '.jpg', message.from_user.id)
    await message.answer("‚è≥ –ü–∞—Ä—É —Å–µ–∫—É–Ω–¥, —Ä–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É üë®üèª‚Äçüé®")
    await state.finish()
    visitmake(str(message.from_user.id), message.from_user.username, str(user_data['profile_name']),
              str(user_data['profile_surname']),
              str(user_data['profile_city']), user_data['profile_role'], str(user_data['profile_superpower']),
              user_data['profile_year'])
    photo = open('visits/' + str(message.from_user.id) + '_visit' + '.png', 'rb')
    await message.answer('üëÄ –ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?')
    await message.answer_photo(photo)
    btn_yes = KeyboardButton('–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ')
    btn_no = KeyboardButton('–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
    menu2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    menu2.add(btn_yes, btn_no)
    await message.answer('‚úÖ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–∞–∂–º–∏ ¬´–î–ê¬ªüëáüèª', reply_markup=menu2)


@dp.message_handler(lambda message: message.text == '–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ')
async def bot_yes(message: types.Message, state: FSMContext):
    await Send.nexta.set()
    image = open('visits/' + str(message.from_user.id) + '_visit' + '.png', 'rb')
    text = '@' + message.from_user.username + ', –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SWC üß°'
    await bot.send_photo(chat_id=-1001168982861, photo=image, caption=text)
    btn_n = KeyboardButton('–î–ê')
    menu6 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    menu6.add(btn_n)
    await message.answer('–¢–æ—á–Ω–æ?', reply_markup=menu6)


@dp.message_handler(state=Send.nexta)
async def send(message: Message, state: FSMContext):
    image = open('visits/' + str(message.from_user.id) + '_visit' + '.png', 'rb')
    text2 = f'–û —Å–µ–±–µ: {(db.get_info(message.from_user.username)[0])[5]}'
    await bot.send_photo(chat_id=-1001597876985, photo=image, caption=text2)
    menu7 = InlineKeyboardMarkup(resize_keyboard=True)
    btn_1 = InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', url='https://t.me/+6ZEqjLuN-000ZTky')
    btn_2 = InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —á–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', url='https://t.me/+to9nZqTJTKhkNWMy')
    menu7.add(btn_1, btn_2)
    await message.answer('üòò –°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–∫–æ–º—ã! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∏–∑–∏—Ç–∫–æ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –æ—Ç–º–µ—á–∞–π SWC üß°', reply_markup=menu7)
    await state.finish()


@dp.message_handler(lambda message: message.text == '–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
async def bot_no(message: types.Message):
    db.delete(message.from_user.id)
    await bot_start(message)


@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        await Dialog.spam.set()
        await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')


@dp.message_handler(state=Dialog.spam)
async def start_spam(message: Message, state: FSMContext):
    spam_base = db.spam()
    for z in range(len(spam_base)):
        await bot.send_message(spam_base[z][0], message.text)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await state.finish()


@dp.message_handler(content_types=['text'], text='–ó–∞–¥–∞—Ç—å –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞')
async def codewords(message: Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        await Codewords.words.set()
        await message.answer('–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å \n –Ω–∞–ø–∏—à–∏ /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å')
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')


@dp.message_handler(commands=['clear'])
async def clear_words(message: types.Message):
    file = open('resources/words.txt', 'r+')
    file.truncate(0)
    file.close()


@dp.message_handler(state=Codewords.words)
async def push_words(message: Message, state: FSMContext):
    file = open('resources/words.txt', 'w', encoding='utf-8')
    file.write(message.text)
    file.close()
    await message.answer('–°–ª–æ–≤–∞ –∑–∞–¥–∞–Ω—ã')
    await state.finish()
    await start(message)


@dp.message_handler(lambda message: message.text == '–í—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤')
async def bot_lead(message: types.Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        final = ''
        for i in db.leaders()[::-1]:
            text = f'@{i[0]} –Ω–∞–±—Ä–∞–ª(–∞) {i[1]} –±–∞–ª–ª–æ–≤ \n'
            final += text
        await message.answer('–°–ø–∏—Å–æ–∫ –õ–∏–¥–µ—Ä–æ–≤')
        await message.answer(final)
        btn_t = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª')
        menu4 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        menu4.add(btn_t)
        await message.answer('–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç?', reply_markup=menu4)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')
        await start(message)


@dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª')
async def bot_lead(message: types.Message):
    final = ''
    for i in db.leaders()[::-1]:
        text = f'@{i[0]} –Ω–∞–±—Ä–∞–ª(–∞) {i[1]} –±–∞–ª–ª–æ–≤ \n'
        final += text
    await bot.send_message(chat_id=-1001685968921, text=final)
    await start(message)


@dp.message_handler(lambda message: message.text == '–û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–ª—ã')
async def bot_null(message: types.Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        db.null()
        await message.answer('–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã')
        await start(message)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')
    await start(message)


@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
async def add_admin(message: types.Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∏–∫ (–±–µ–∑ –∑–Ω–∞–∫–∞ @)')
        await Newadmin.admin.set()
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')


@dp.message_handler(state=Newadmin.admin)
async def add_admin_2(message: Message, state: FSMContext):
    db.add_admin(message.text)
    await message.answer('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω')
    await state.finish()
    await start(message)


@dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
async def del_admin(message: types.Message):
    admin = db.is_admin(message.from_user.username)[0]
    if admin == 1:
        await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∏–∫ (–±–µ–∑ –∑–Ω–∞–∫–∞ @)')
        await Deleteadmin.username.set()
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')


@dp.message_handler(state=Deleteadmin.username)
async def del_admin_2(message: Message, state: FSMContext):
    db.delete_admin(message.text)
    await message.answer('–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω')
    await state.finish()
    await start(message)


@dp.message_handler()
async def word_finder(message: types.Message):
    if db.profile_exists(message.from_user.username) is True:
        file = open('resources/words.txt', 'r', encoding='utf-8')
        word_list = file.read().split(', ')
        mes_words = message.text.split()
        for mes_word in mes_words:
            if mes_word in word_list:
                db.add_point(1, message.from_user.id)
                await message.answer('+1 –±–∞–ª')

        file.close()


executor.start_polling(dp, skip_updates=True)
